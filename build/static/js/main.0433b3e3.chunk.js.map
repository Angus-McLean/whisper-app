{"version":3,"sources":["components/MessageText.js","components/MessagesList.js","components/InputBox.js","components/ChatRoom.js","components/MainJitsi.js","App.js","serviceWorker.js","index.js"],"names":["MessageText","msgObj","this","props","message","sent","uid","className","text","toString","Component","MessagesList","dummy","React","createRef","console","log","messages","setTimeout","current","scrollIntoView","behavior","style","overflow","height","reverse","map","msg","key","id","ref","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","photoURL","add","createdAt","FieldValue","serverTimestamp","onSubmit","type","value","onChange","target","placeholder","aria-describedby","background","width","border","color","onClick","class","JitsiMeetExternalAPI","window","MAINVIDEOLOADED","MainJitsi","api","roomName","parentNode","document","getElementById","userInfo","email","displayName","configOverwrite","prejoinPageEnabled","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0433b3e3.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass MessageText extends Component {\n    render() {\n        // console.log(this.props.message)\n        var msgObj = this.props.message\n        \n        var sent = msgObj.uid === 'asdf'\n\n        if (!sent) {\n            return (\n                <div className=\"div-block-11 received\">\n                    <div className=\"div-block-10 received\">\n                        <div className=\"text-block-3\">{msgObj.text}</div>\n                    </div>\n                </div>\n            )\n        }\n        else if (sent) {\n            return (\n                <div className=\"div-block-11\">\n                    <div className=\"div-block-10\">\n                        <div className=\"text-block-3\">{msgObj.text}</div>\n                    </div>\n                </div>\n            )\n        } else { return msgObj.toString() }\n    }\n}\n\nexport default MessageText;\n","import React, {Component, useRef}  from 'react';\nimport MessageText from './MessageText';\n\n\nclass MessagesList extends Component {\n    \n    constructor(){\n        super()\n        this.dummy = React.createRef();\n    }\n    render() {\n        console.log(\"MessagesList\", this.props.messages)\n\n        setTimeout(()=>{\n            console.log(this.dummy)\n            this.dummy.current.scrollIntoView({ behavior: 'smooth' })\n        }, 100)\n\n        return (\n            <div style={{ overflow: 'scroll', height: '55vh' }}>\n                {\n                    this.props.messages && this.props.messages.reverse().map(msg => (\n                        <MessageText key={msg.id} message={msg}/>\n                    ))\n                }\n                <span ref={this.dummy}></span>\n            </div>\n        )\n    }\n}\n\nexport default MessagesList;\n","import React, { Component } from 'react';\n\nclass InputBox extends Component {\n\n\n\n    sendMessage(e) {\n        alert(\"Not yet implemented!\")\n    }\n\n    render() {\n        console.log(this.props.messages)\n        return (\n                <div className=\"input-group\">\n                    <input type=\"text\" placeholder=\"Type a message\" aria-describedby=\"button-addon2\" className=\"form-control rounded-0 border-0 py-4 bg-light\" />\n                    <div className=\"input-group-append\">\n                        <button id=\"button-addon2\" className=\"btn btn-link\" onClick={this.sendMessage}>\n                            <i className=\"fa fa-paper-plane\"></i>\n                        </button>\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default InputBox;\n","import React, { Component, useRef, useState } from 'react';\n\n\n// Import & init firebase\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport MessageText from './MessageText';\nimport InputBox from './InputBox';\nimport MessagesList from './MessagesList';\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCgNBwvWRmiD-XKVVwPlXtfeFgDxrdS1Cc\",\n  authDomain: \"ecse542-whisper.firebaseapp.com\",\n  databaseURL: \"https://ecse542-whisper.firebaseio.com\",\n  projectId: \"ecse542-whisper\",\n  storageBucket: \"ecse542-whisper.appspot.com\",\n  messagingSenderId: \"994712361483\",\n  appId: \"1:994712361483:web:47d47d3f160de1a275450e\",\n  measurementId: \"G-S42HK278KF\"\n})\n\n// const auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\nfunction ChatRoom() {\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt' ,'desc').limit(25);\n\n    var [messages] = useCollectionData(query, { idField: 'id' });\n    console.log('messages',messages)\n    const [formValue, setFormValue] = useState('');\n\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        const { uid, photoURL } = {uid:'asdf',photoURL:'#'};\n\n        await messagesRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        })\n\n        setFormValue('');\n    }\n    \n\n    return (\n        <div className=\"div-block-2\">\n            <div>\n                <div className=\"div-block-6\">\n                    <div className=\"text-block\">Your Group</div>\n                    <div className=\"text-block less\">Main Chat</div>\n                </div>\n            </div>\n            <div className=\"div-block-5\">\n                <div className=\"w-layout-grid green\">\n                    <div className=\"div-block-3\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Joseff Padilla</div>\n                        </div>\n                    </div>\n                    <div className=\"div-block-3 hover\">\n                        <div className=\"text-block\"><strong>Private whisper to</strong>Kaiya Bowen</div>\n                    </div>\n                    <div className=\"div-block-3 you\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Jodi Avery (You)</div>\n                        </div>\n                    </div>\n                    <div className=\"div-block-3\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Blake Kemp</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <MessagesList messages={messages}/>\n            \n            <form onSubmit={sendMessage} className=\"div-block-7\">\n                {/* <div className=\"text-block-2\">Type here...</div> */}\n                <input className=\"text-block-2\" type=\"text\" value={formValue} \n                    onChange={(e) => setFormValue(e.target.value)} \n                    placeholder=\"Type here...\" aria-describedby=\"button-addon2\" \n                    className=\"form-control rounded-0 border-0 py-4 bg-light\"\n                    style={{\n                        background: 'transparent',\n                        width: '100%',\n                        border: 'none',\n                        color: 'gray',\n                        height: 'min-content'\n                    }}\n                />\n                <div className=\"div-block-8\">\n                    <div className=\"div-block-9\" onClick={sendMessage}><i class=\"fa fa-send\"></i></div>\n                    <div className=\"div-block-9\"><i class=\"fa fa-phone\"></i></div>\n                    <div className=\"div-block-9\"><i class=\"fa fa-bullseye\"></i></div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default ChatRoom;\n","import React, { Component } from 'react';\n\n\nvar JitsiMeetExternalAPI = window.JitsiMeetExternalAPI || {}\nvar MAINVIDEOLOADED = false\n\n\nclass MainJitsi extends Component {\n\n    constructor(){\n        super()\n    }\n\n    render() {\n        console.log(\"MainJitsi\", this.props)\n                \n        setTimeout(() => {\n            if (!MAINVIDEOLOADED) {\n                MAINVIDEOLOADED = true\n                window.api = new JitsiMeetExternalAPI('meet.jit.si', {\n                    roomName:'testRoom-asdf1234qwer',\n                    parentNode:document.getElementById('MainJitsi'),\n                    width:'100%', height:'100%', userInfo: {\n                        email: 'email@jitsiexamplemail.com',\n                        displayName: 'John Doe'\n                    }, configOverwrite: {\n                        prejoinPageEnabled: false,\n                    }})\n            }\n        }, 500)\n\n        return (\n            <div id=\"MainJitsi\"></div>\n        )\n    }\n}\n\nexport default MainJitsi;\n","import React from 'react';\n\n// Import Jitsi Stuff\n// import Jitsi from 'react-jitsi'\n\n// Import other App components etc\nimport './App.css';\nimport ChatRoom from './components/ChatRoom';\nimport MainJitsi from './components/MainJitsi';\nimport './site-styles.css'\n\nfunction App() {\n\n  const roomName = 'my-super-secret-meeting-asfewkjalc'\n  const userFullName = 'Joseph Strawberry'\n  \n  \n  return (<>\n    <ChatRoom/>\n    <div className=\"div-block\">\n      <MainJitsi/>\n    </div>\n    \n    </>\n  );\n}\n\nexport default App;\n\n\n\n// Other Helpers \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}