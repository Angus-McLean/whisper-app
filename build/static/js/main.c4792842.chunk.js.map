{"version":3,"sources":["components/MessageText.js","components/InputBox.js","components/MessagesList.js","components/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["MessageText","Component","console","log","this","props","message","msgObj","sent","uid","className","text","Date","createdAt","toLocaleString","toString","src","alt","width","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","photoURL","add","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","key","id","ref","onSubmit","type","value","onChange","target","placeholder","aria-describedby","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6TAoCeA,GClCQC,Y,uKDEfC,QAAQC,IAAIC,KAAKC,MAAMC,SACvB,IAAIC,EAASH,KAAKC,MAAMC,QAEpBE,EAAsB,SAAfD,EAAOE,IAElB,OAAKD,EAYIA,EAED,yBAAKE,UAAU,2BACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qCACX,uBAAGA,UAAU,8BAA8BH,EAAOI,OAEtD,uBAAGD,UAAU,oBAAoBE,KAAKL,EAAOM,WAAWC,oBAIxDP,EAAOQ,WArBf,yBAAKL,UAAU,mBAAkB,yBAAKM,IAAI,6EAA6EC,IAAI,OAAOC,MAAM,KAAKR,UAAU,mBACnJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,mCACX,uBAAGA,UAAU,8BAA8BH,EAAOI,OAEtD,uBAAGD,UAAU,oBAAoBE,KAAKL,EAAOM,WAAWC,wB,GAdtDb,c,GEECA,Y,mCCW3BkB,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAMC,EAAYV,IAASU,YAkDZC,MA/Cf,WACI,IAAMC,EAAQC,mBACRC,EAAcJ,EAAUK,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHrC,EAKGC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALS,sBAMkBC,mBAAS,IAN3B,mBAMTC,EANS,KAMEC,EANF,KASVC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBAEMtC,GAHQ,EAGU,CAACA,IAAI,OAAOuC,SAAS,MAAvCvC,IAAKuC,EAHG,EAGHA,SAHG,SAKVf,EAAYgB,IAAI,CAClBtC,KAAM+B,EACN7B,UAAWM,IAASU,UAAUqB,WAAWC,kBACzC1C,MACAuC,aATY,OAYhBL,EAAa,IACbZ,EAAMqB,QAAQC,eAAe,CAAEC,SAAU,WAbzB,2CAAH,sDAgBjB,OAAQ,oCACJ,yBAAK5C,UAAU,gBACX,yBAAKA,UAAU,+BACV8B,GAAYA,EAASe,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAaC,IAAKD,EAAIE,GAAIpD,QAASkD,OACpE,0BAAMG,IAAK5B,MAInB,0BAAM6B,SAAUhB,GACZ,yBAAKlC,UAAU,eACP,2BAAOmD,KAAK,OAAOC,MAAOpB,EAAWqB,SAAU,SAAClB,GAAD,OAAOF,EAAaE,EAAEmB,OAAOF,QAAQG,YAAY,iBAAiBC,mBAAiB,gBAAgBxD,UAAU,kDAC5J,yBAAKA,UAAU,sBACX,4BAAQgD,GAAG,gBAAgBG,KAAK,SAASM,UAAWzB,EAAWhC,UAAU,gBACrE,uBAAGA,UAAU,4BC/B1B0D,MA3Bf,WAKE,OACE,yBAAK1D,UAAU,OACb,yBAAKA,UAAU,yCACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,gBAAb,2CAEF,kBAAC,EAAD,QAIJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mCAAf,yBChBU2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMhF,c","file":"static/js/main.c4792842.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass MessageText extends Component {\n    render() {\n        console.log(this.props.message)\n        var msgObj = this.props.message\n        \n        var sent = msgObj.uid === 'asdf'\n\n        if (!sent) {\n            return (\n                <div className=\"media w-50 mb-3\"><img src=\"https://res.cloudinary.com/mhmd/image/upload/v1564960395/avatar_usae7z.svg\" alt=\"user\" width=\"50\" className=\"rounded-circle\" />\n                    <div className=\"media-body ml-3\">\n                        <div className=\"bg-light rounded py-2 px-3 mb-2\">\n                            <p className=\"text-small mb-0 text-muted\">{msgObj.text}</p>\n                        </div>\n                        <p className=\"small text-muted\">{Date(msgObj.createdAt).toLocaleString() }</p>\n                    </div>\n                </div>\n            )\n        }\n        else if (sent) {\n            return (\n                <div className=\"media w-50 ml-auto mb-3\">\n                    <div className=\"media-body\">\n                        <div className=\"bg-primary rounded py-2 px-3 mb-2\">\n                            <p className=\"text-small mb-0 text-white\">{msgObj.text}</p>\n                        </div>\n                        <p className=\"small text-muted\">{Date(msgObj.createdAt).toLocaleString() }</p>\n                    </div>\n                </div>\n            )\n        } else { return msgObj.toString() }\n    }\n}\n\nexport default MessageText;\n","import React, { Component } from 'react';\n\nclass InputBox extends Component {\n\n\n\n    sendMessage(e) {\n        alert(\"Not yet implemented!\")\n    }\n\n    render() {\n        console.log(this.props.messages)\n        return (\n                <div className=\"input-group\">\n                    <input type=\"text\" placeholder=\"Type a message\" aria-describedby=\"button-addon2\" className=\"form-control rounded-0 border-0 py-4 bg-light\" />\n                    <div className=\"input-group-append\">\n                        <button id=\"button-addon2\" className=\"btn btn-link\" onClick={this.sendMessage}>\n                            <i className=\"fa fa-paper-plane\"></i>\n                        </button>\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default InputBox;\n","import React, {Component}  from 'react';\nimport MessageText from './MessageText';\n\n\nclass MessagesList extends Component {\n    render() {\n        console.log(this.props.messages)\n\n        return (\n            <div className=\"messages-box\">\n                <div className=\"px-4 py-5 chat-box bg-white\">\n                    {\n                        this.props.messages.map(msg => (\n                            <MessageText message={msg}/>\n                        ))\n                    }\n                    </div>\n                </div>\n\n        )\n    }\n}\n\nexport default MessagesList;\n","import React, { Component, useRef, useState } from 'react';\n\nimport InputBox from './InputBox';\nimport MessagesList from './MessagesList';\n\n// Import & init firebase\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport MessageText from './MessageText';\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCgNBwvWRmiD-XKVVwPlXtfeFgDxrdS1Cc\",\n  authDomain: \"ecse542-whisper.firebaseapp.com\",\n  databaseURL: \"https://ecse542-whisper.firebaseio.com\",\n  projectId: \"ecse542-whisper\",\n  storageBucket: \"ecse542-whisper.appspot.com\",\n  messagingSenderId: \"994712361483\",\n  appId: \"1:994712361483:web:47d47d3f160de1a275450e\",\n  measurementId: \"G-S42HK278KF\"\n})\n\n// const auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\nfunction ChatRoom() {\n    const dummy = useRef();\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt').limit(25);\n\n    const [messages] = useCollectionData(query, { idField: 'id' });\n    const [formValue, setFormValue] = useState('');\n\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        const { uid, photoURL } = {uid:'asdf',photoURL:'#'};\n\n        await messagesRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        })\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n    // setTimeout(()=>dummy.current.scrollIntoView({ behavior: 'smooth' }), 1000)\n    return (<>\n        <div className=\"messages-box\">\n            <div className=\"px-4 py-5 chat-box bg-white\">\n                {messages && messages.map(msg => <MessageText key={msg.id} message={msg} />)}\n                <span ref={dummy}></span>\n            </div>\n        </div>\n\n        <form onSubmit={sendMessage}>\n            <div className=\"input-group\">\n                    <input type=\"text\" value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Type a message\" aria-describedby=\"button-addon2\" className=\"form-control rounded-0 border-0 py-4 bg-light\" />\n                    <div className=\"input-group-append\">\n                        <button id=\"button-addon2\" type=\"submit\" disabled={!formValue} className=\"btn btn-link\" >\n                            <i className=\"fa fa-paper-plane\"></i>\n                        </button>\n                    </div>\n                </div>\n\n        </form>\n    </>)\n}\n\nexport default ChatRoom;\n","import React from 'react';\n\n// Import Jitsi Stuff\nimport Jitsi from 'react-jitsi'\n\n// Import other App components etc\nimport './App.css';\nimport ChatRoom from './components/ChatRoom';\n\n\nfunction App() {\n\n  const roomName = 'my-super-secret-meeting-asfewkjalc'\n  const userFullName = 'Joseph Strawberry'\n  \n  return (\n    <div className=\"App\">\n      <div className=\"row rounded-lg overflow-hidden shadow\">\n        <div className=\"col-5 px-0\">\n          <div className=\"bg-white\">\n            <div className=\"bg-gray px-4 py-2 bg-light\">\n              <p className=\"h5 mb-0 py-1\">Team  &nbsp;&nbsp; | &nbsp;&nbsp;&nbsp; Everyone</p>\n            </div>\n            <ChatRoom/>\n          </div>\n        </div>\n        {/* <!-- Chat Box--> */}\n        <div className=\"col-7 px-0 bg-white\">\n          <div className=\"px-4 py-5 text-center chat-box \">MAIN VIDEO WINDOW\n            {/* <Jitsi/> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// Other Helpers \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}