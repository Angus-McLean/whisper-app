{"version":3,"sources":["components/MessageText.js","components/MessagesList.js","components/ReactMicComp.js","components/ChatInputs.js","components/ChatRoom.js","components/MainJitsi.js","App.js","serviceWorker.js","index.js"],"names":["MessageText","msgObj","this","props","message","sent","uid","type","className","style","margin","controls","src","text","Component","MessagesList","bottomRef","React","createRef","console","log","messages","setTimeout","current","scrollIntoView","behavior","overflow","height","reverse","map","msg","key","id","ref","ReactMicComp","startRecording","setState","record","stopRecording","self","state","recordedBlob","saveToFirebase","blobObj","photoURL","storageRef","child","stopTime","put","blob","contentType","then","resp","getDownloadURL","downloadUrl","messagesRef","add","createdAt","firebase","firestore","FieldValue","serverTimestamp","width","mimeType","onStop","bind","strokeColor","backgroundColor","ChatInputs","sendMessage","e","a","preventDefault","inputValue","inputType","audioRecRef","onSubmit","value","onChange","target","placeholder","aria-describedby","background","border","color","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","window","ChatRoom","collection","storage","query","orderBy","limit","useCollectionData","idField","JitsiMeetExternalAPI","MAINVIDEOLOADED","MainJitsi","api","roomName","parentNode","document","getElementById","userInfo","email","displayName","configOverwrite","prejoinPageEnabled","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.968eee67.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass MessageText extends Component {\n    render() {\n        // console.log(this.props.message)\n        var msgObj = this.props.message\n        \n        var sent = msgObj.uid === 'asdf'\n\n        if (msgObj.type === 'recording') {\n            return (\n                <div className={\"div-block-11 \"+ (sent ? \"\" : \"received\")}>\n                    <div className={\"div-block-10 \"+ (sent ? \"\" : \"received\")}>\n                        <figure style={{margin:'10px'}}>\n                            <audio controls src={msgObj.text}></audio>\n                        </figure>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className={\"div-block-11 \"+ (sent ? \"\" : \"received\")}>\n                <div className={\"div-block-10 \"+ (sent ? \"\" : \"received\")}>\n                    <div className=\"text-block-3\">{msgObj.text}</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MessageText;\n","import React, {Component }  from 'react';\nimport MessageText from './MessageText';\n\n\nclass MessagesList extends Component {\n    \n    constructor(){\n        super()\n        this.bottomRef = React.createRef();\n    }\n    render() {\n        console.log(\"MessagesList\", this.props.messages)\n\n        setTimeout(()=>{\n            console.log(this.bottomRef)\n            this.bottomRef.current && this.bottomRef.current.scrollIntoView({ behavior: 'smooth' })\n        }, 100)\n\n        return (\n            <div style={{ overflow: 'scroll', height: '55vh' }}>\n                {\n                    this.props.messages && this.props.messages.reverse().map(msg => (\n                        <MessageText key={msg.id} message={msg}/>\n                    ))\n                }\n                <span ref={this.bottomRef}></span>\n            </div>\n        )\n    }\n}\n\nexport default MessagesList;\n","import React from 'react';\nimport { ReactMic } from 'react-mic';\n\nimport firebase from 'firebase/app';\n\nexport default class ReactMicComp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            record: false\n        }\n        console.log(ReactMicComp, this)\n        if (!this.state.record) { setTimeout(()=>this.startRecording(), 1) }\n    }\n\n    startRecording = () => {\n        this.setState({ record: true });\n    }\n\n    stopRecording = () => {\n        var self = this\n        self.setState({ record: false });\n        setTimeout(()=>self.setState({ record: false }), 100);\n    }\n\n    onData(recordedBlob) {\n        console.log('chunk of real-time data is: ', recordedBlob);\n    }\n\n    onStop(recordedBlob) {\n        console.log('recordedBlob is: ', recordedBlob, this);\n        this.saveToFirebase(recordedBlob)\n    }\n\n    saveToFirebase(blobObj) {\n        var self = this\n\n        const { uid, photoURL } = {uid:'asdf',photoURL:'#'};\n\n        return self.props.storageRef.child('uploads/'+uid+'-'+blobObj.stopTime+'.mp3').put(blobObj.blob, {\n            contentType: 'audio/mp3'\n        }).then((resp) => {\n            resp.ref.getDownloadURL().then(downloadUrl => {\n                console.log('audioUpload callback', resp)\n                self.props.messagesRef.add({\n                    text: downloadUrl,\n                    type: 'recording',\n                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n                    uid,\n                    photoURL\n                })\n            })\n\n        })\n    }\n\n    render() {\n        \n        return (\n            <div style={{ width: '100%', height: '100%' }}>\n                <ReactMic\n                    record={this.state.record}\n                    className=\"sound-wave\"\n                    mimeType=\"audio/webm\"\n                    onStop={this.onStop.bind(this)}\n                    strokeColor=\"#9b9b9b\"\n                    width=\"300\"\n                    backgroundColor=\"#000813\" />\n                {/* <button onClick={this.startRecording} type=\"button\">Start</button>\n        <button onClick={this.stopRecording} type=\"button\">Stop</button> */}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\n\nimport firebase from 'firebase/app';\nimport ReactMicComp from './ReactMicComp';\n\nclass ChatInputs extends Component {\n\n    sendMessage = async (e) => {\n        e.preventDefault();\n\n        const { uid, photoURL } = {uid:'asdf',photoURL:'#'};\n\n        await this.props.messagesRef.add({\n            type: 'text',\n            text: this.state.inputValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL\n        })\n\n        // this.setFormValue('');\n        this.state.inputValue = '';\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {\n            inputType : 'text',\n            inputValue : ''\n        }\n        console.log(React)\n\n        this.audioRecRef = React.createRef();\n\n    }\n\n    render() {\n        var self = this;\n        if (this.state.inputType === 'text') {\n            return (<>\n                <form onSubmit={this.sendMessage} className=\"div-block-7\">\n                    <input className=\"text-block-2\" type=\"text\" value={this.state.inputValue} \n                        onChange={(e) => self.setState({inputValue : e.target.value})}  \n                        placeholder=\"Type here...\" aria-describedby=\"button-addon2\" \n                        className=\"form-control rounded-0 border-0 py-4 bg-light\"\n                        style={{\n                            background: 'transparent',\n                            width: '100%',\n                            border: 'none',\n                            color: 'gray',\n                            height: 'min-content'\n                        }}\n                    />\n                    <div className=\"div-block-8\">\n                        <div className=\"div-block-9\" onClick={this.sendMessage}><i className=\"fa fa-send\"></i></div>\n                        <div className=\"div-block-9\"><i className=\"fa fa-phone\"></i></div>\n                        <div className=\"div-block-9\" onClick={()=>{\n                            self.setState({inputType:'record'});\n                        }}><i className=\"fa fa-bullseye\"></i></div>\n                    </div>\n                </form>\n            </>)\n        } else if (this.state.inputType === 'record') {\n            return (<>\n                <form onSubmit={this.sendMessage} className=\"div-block-7\">\n                    <ReactMicComp ref={this.audioRecRef} storageRef={this.props.storageRef} messagesRef={this.props.messagesRef}/>\n                    <div className=\"div-block-8\">\n                        <div className=\"div-block-9\" onClick={()=>{\n                            console.log(self.audioRecRef && self.audioRecRef.current)\n                            self.audioRecRef.current.stopRecording()\n                            setTimeout(()=>{self.setState({inputType:'text'})}, 100)\n                        }}><i className=\"fa fa-stop\"></i></div>\n                    </div>\n                </form>\n            </>)\n        }\n    }\n}\n\nexport default ChatInputs;\n","import React, { useState } from 'react';\n\n\n// Import & init firebase\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport MessagesList from './MessagesList';\nimport ChatInputs from './ChatInputs';\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCgNBwvWRmiD-XKVVwPlXtfeFgDxrdS1Cc\",\n  authDomain: \"ecse542-whisper.firebaseapp.com\",\n  databaseURL: \"https://ecse542-whisper.firebaseio.com\",\n  projectId: \"ecse542-whisper\",\n  storageBucket: \"ecse542-whisper.appspot.com\",\n  messagingSenderId: \"994712361483\",\n  appId: \"1:994712361483:web:47d47d3f160de1a275450e\",\n  measurementId: \"G-S42HK278KF\"\n})\n\n// const auth = firebase.auth();\nconst firestore = firebase.firestore();\nwindow.firebase = firebase\n// const analytics = firebase.analytics();\n\nfunction ChatRoom() {\n    const messagesRef = firestore.collection('messages');\n    const storageRef = firebase.storage().ref();\n    const query = messagesRef.orderBy('createdAt' ,'desc').limit(25);\n\n    var [messages] = useCollectionData(query, { idField: 'id' });\n    console.log('messages',messages)\n    \n\n    return (\n        <div className=\"div-block-2\">\n            <div>\n                <div className=\"div-block-6\">\n                    <div className=\"text-block\">Your Group</div>\n                    <div className=\"text-block less\">Main Chat</div>\n                </div>\n            </div>\n            <div className=\"div-block-5\">\n                <div className=\"w-layout-grid green\">\n                    <div className=\"div-block-3\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Joseff Padilla</div>\n                        </div>\n                    </div>\n                    <div className=\"div-block-3 hover\">\n                        <div className=\"text-block\"><strong>Private whisper to</strong>Kaiya Bowen</div>\n                    </div>\n                    <div className=\"div-block-3 you\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Jodi Avery (You)</div>\n                        </div>\n                    </div>\n                    <div className=\"div-block-3\">\n                        <div className=\"div-block-4 green\">\n                            <div className=\"text-block\">Blake Kemp</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <MessagesList messages={messages}/>\n            \n            <ChatInputs messagesRef={messagesRef} storageRef={storageRef}/>\n        </div>\n    )\n}\n\nexport default ChatRoom;\n","import React, { Component } from 'react';\n\n\nvar JitsiMeetExternalAPI = window.JitsiMeetExternalAPI || {}\nvar MAINVIDEOLOADED = false\n\n\nclass MainJitsi extends Component {\n\n    constructor(){\n        super()\n    }\n\n    render() {\n        console.log(\"MainJitsi\", this.props)\n                \n        setTimeout(() => {\n            if (!MAINVIDEOLOADED) {\n                MAINVIDEOLOADED = true\n                window.api = new JitsiMeetExternalAPI('meet.jit.si', {\n                    roomName:'testRoom-asdf1234qwer',\n                    parentNode:document.getElementById('MainJitsi'),\n                    width:'100%', height:'100%', userInfo: {\n                        email: 'email@jitsiexamplemail.com',\n                        displayName: 'John Doe'\n                    }, configOverwrite: {\n                        prejoinPageEnabled: false,\n                    }})\n            }\n        }, 500)\n\n        return (\n            <div id=\"MainJitsi\"></div>\n        )\n    }\n}\n\nexport default MainJitsi;\n","import React from 'react';\n\n// Import Jitsi Stuff\n// import Jitsi from 'react-jitsi'\n\n// Import other App components etc\nimport './App.css';\nimport ChatRoom from './components/ChatRoom';\nimport MainJitsi from './components/MainJitsi';\nimport './site-styles.css'\n\nfunction App() {\n  \n  return (<>\n    <ChatRoom/>\n    <div className=\"div-block\">\n      <MainJitsi/>\n    </div>\n    \n    </>\n  );\n}\n\nexport default App;\n\n\n\n// Other Helpers \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}